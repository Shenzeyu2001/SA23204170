// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// generateARMA
NumericVector generateARMA(int p, int q, int n, const Rcpp::NumericVector& arParams, const Rcpp::NumericVector& maParams);
RcppExport SEXP _SA23204170_generateARMA(SEXP pSEXP, SEXP qSEXP, SEXP nSEXP, SEXP arParamsSEXP, SEXP maParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type arParams(arParamsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type maParams(maParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(generateARMA(p, q, n, arParams, maParams));
    return rcpp_result_gen;
END_RCPP
}
// gibbsC
NumericMatrix gibbsC(int N, int n, int a, int b);
RcppExport SEXP _SA23204170_gibbsC(SEXP NSEXP, SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbsC(N, n, a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SA23204170_generateARMA", (DL_FUNC) &_SA23204170_generateARMA, 5},
    {"_SA23204170_gibbsC", (DL_FUNC) &_SA23204170_gibbsC, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_SA23204170(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
